// [[file:~/roper2/src/emu/hatchery.org::hatch][hatch]]
#[inline]
pub fn hatch(creature: &mut gen::Creature, input: &gen::Input, emu: &mut Engine) -> gen::Pod {
    let mut payload = creature.genome.pack(input);
    let start_addr = creature.genome.entry().unwrap();
    /* A missing entry point should be considered an error,
     * since we try to guard against this in our generation
     * functions.
     */
    let (stack_addr, stack_size) = emu.find_stack();
    payload.truncate(stack_size / 2);
    let _payload_len = payload.len();
    let stack_entry = stack_addr + (stack_size / 2) as u64;
    emu.restore_state();

    /* load payload **/
    emu.mem_write(stack_entry, &payload)
        .expect("mem_write fail in hatch");
    emu.set_sp(stack_entry + *ADDR_WIDTH as u64);

  let visitor: Rc<RefCell<Vec<VisitRecord>>> = Rc::new(RefCell::new(Vec::new()));
  let writelog = Rc::new(RefCell::new(Vec::new()));
  let retlog = Rc::new(RefCell::new(Vec::new()));
  let jmplog = Rc::new(RefCell::new(Vec::new()));
  
  let mem_write_hook = {
      let writelog = writelog.clone();
      let callback = move |uc: &unicorn::Unicorn,
                           _memtype: unicorn::MemType,
                           addr: u64,
                           size: usize,
                           val: i64| {
          let mut wmut = writelog.borrow_mut();
          let pc = read_pc(uc).unwrap();
          let write_record = WriteRecord {
              pc: pc,
              dest_addr: addr,
              value: val as u64,
              size: size,
          };
          wmut.push(write_record);
          true
      };
      emu.hook_writeable_mem(callback)
  };
  
  let visit_hook = {
      let visitor = visitor.clone();
      let callback = move |uc: &unicorn::Unicorn, addr: u64, size: u32| {
          let mut vmut = visitor.borrow_mut();
          let mode = get_mode(&uc);
          let size: usize = (size & 0xF) as usize;
          let registers = uc_general_registers(&uc).unwrap();
          let visit_record = VisitRecord {
              pc: addr,
              mode: mode,
              inst_size: size,
              registers: registers,
          };
          vmut.push(visit_record);
      };
      emu.hook_exec_mem(callback)
  };
  
  let ret_hook = {
      let retlog = retlog.clone();
      let callback = move |_uc: &unicorn::Unicorn, addr: u64, _size: u32| {
          let mut retlog = retlog.borrow_mut();
          let pc = addr;
          retlog.push(pc);
      };
      emu.hook_rets(callback)
  };
  
  let indirect_jump_hook = {
      let jmplog = jmplog.clone();
      let callback = move |_uc: &unicorn::Unicorn, addr: u64, _size: u32| {
          let mut jmplog = jmplog.borrow_mut();
          jmplog.push(addr);
      };
      emu.hook_indirect_jumps(callback)
  };

    let _res = emu.start(start_addr, 0, 0, 1024);

  /* Now, clean up the hooks */
  match visit_hook {
      Ok(h) => {
          emu.remove_hook(h).unwrap();
      }
      Err(e) => {
          println!("visit_hook didn't take {:?}", e);
      }
  }
  match mem_write_hook {
      Ok(h) => {
          emu.remove_hook(h).unwrap();
      }
      Err(e) => {
          println!("mem_write_hook didn't take {:?}", e);
      }
  }
  match ret_hook {
      Ok(h) => {
          emu.remove_hook(h).unwrap();
      }
      Err(e) => {
          println!("ret_hook didn't take: {:?}", e);
      }
  }
  match indirect_jump_hook {
      Ok(h) => {
          emu.remove_hook(h).unwrap();
      }
      Err(e) => {
          println!("indirect_jmp_hook didn't take: {:?}", e);
      }
  }
  
  /* Get the behavioural data from the mutable vectors */
  let registers = emu.read_general_registers().unwrap();
  let vtmp = visitor.clone();
  let visited = vtmp.borrow().to_vec().clone();
  let wtmp = writelog.clone();
  let writelog = wtmp.borrow().to_vec().clone();
  let rtmp = retlog.clone();
  let retlog = rtmp.borrow().to_vec().clone();

    let pod = gen::Pod::new(registers, visited, writelog, retlog);
    pod
}
// hatch ends here
